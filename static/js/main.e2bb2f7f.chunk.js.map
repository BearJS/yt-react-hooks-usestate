{"version":3,"sources":["components/Input.jsx","components/Radio.jsx","components/Checkbox.jsx","components/Textarea.jsx","components/Select.jsx","utils/useForm.js","components/UseStateForm.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","label","id","handleChange","name","type","value","htmlFor","onChange","Radio","form","checked","Checkbox","Textarea","rows","Select","options","map","key","useForm","initialState","useState","formValues","setFormValue","e","target","prevFormValues","UseStateForm","handleSubmit","weight","height","food","football","hockey","bio","car","onSubmit","event","preventDefault","val","startCase","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e2bb2f7f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Input = ({label, id, handleChange, name, type, value}) => (\n  <>\n    <label htmlFor={id}>{label}</label>\n    <input\n      type={type || 'text'}\n      id={id}\n      name={name || id}\n      onChange={handleChange}\n      value={value}\n    />\n    <br />\n  </>\n);\n\nexport default Input;\n","import React from 'react';\n\nconst Radio = ({label, id, handleChange, name, form}) => (\n  <>\n    <input\n      type=\"radio\"\n      id={id}\n      name={name}\n      onChange={handleChange}\n      value={id}\n      checked={form[name] === id}\n    />\n    <label htmlFor={id}>{label}</label>\n    <br />\n  </>\n);\n\nexport default Radio;\n","import React from 'react';\n\nconst Checkbox = ({label, id, handleChange, form}) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id={id}\n      name={id}\n      value={id}\n      onChange={handleChange}\n      checked={form[id]}\n    />\n    <label htmlFor={id}>{label}</label>\n    <br />\n  </>\n);\n\nexport default Checkbox;\n","import React from 'react';\n\nconst Textarea = ({label, id, handleChange, name, value, rows}) => (\n  <>\n    <br />\n    <div>\n      <label htmlFor={id}>{label}</label>\n    </div>\n    <textarea\n      id={id}\n      name={name || id}\n      onChange={handleChange}\n      value={value}\n      rows={rows || 3}\n    />\n    <br />\n  </>\n);\n\nexport default Textarea;\n","import map from 'lodash/map';\nimport React from 'react';\n\nconst Select = ({label, id, handleChange, name, value, options}) => (\n  <>\n    <div>\n      <label htmlFor={id}>{label}</label>\n    </div>\n    <select id={id} name={name || id} onChange={handleChange} value={value}>\n      {map(options, ({label, value}) => (\n        <option value={value} key={value}>\n          {label}\n        </option>\n      ))}\n    </select>\n    <br />\n  </>\n);\n\nexport default Select;\n","import {useState} from 'react';\n\nconst useForm = (initialState) => {\n  const [formValues, setFormValue] = useState(initialState);\n\n  const handleChange = (e) => {\n    const {name, value, type, checked} = e.target;\n    //console.log({...e.target});\n    setFormValue((prevFormValues) => ({\n      ...prevFormValues,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n  };\n\n  return {\n    handleChange,\n    formValues,\n  };\n};\n\nexport default useForm;\n","import React from 'react';\nimport map from 'lodash/map';\nimport startCase from 'lodash/startCase';\nimport Input from './Input';\nimport Radio from './Radio';\nimport Checkbox from './Checkbox';\nimport Textarea from './Textarea';\nimport Select from './Select';\nimport useForm from '../utils/useForm';\n\nconst UseStateForm = ({handleSubmit}) => {\n  const {formValues, handleChange} = useForm({\n    name: '',\n    weight: '',\n    height: '',\n    food: '',\n    football: false,\n    hockey: true,\n    bio: 'What do you like to do?',\n    car: '',\n  });\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        handleSubmit(formValues);\n      }}\n    >\n      <h2>UseStateForm</h2>\n      {map(formValues, (val, key) => (\n        <div key={key}>\n          {`${startCase(key)}: `}\n          {`${val}`}\n        </div>\n      ))}\n      <Input\n        label=\"Name: \"\n        id=\"name\"\n        handleChange={handleChange}\n        value={formValues.name}\n      />\n      <Input\n        label=\"Weight: \"\n        id=\"weight\"\n        handleChange={handleChange}\n        value={formValues.weight}\n      />\n      <Input\n        label=\"Height: \"\n        id=\"height\"\n        handleChange={handleChange}\n        value={formValues.height}\n      />\n      <p>I like to eat:</p>\n      <Radio\n        form={formValues}\n        name=\"food\"\n        label=\"Salad\"\n        id=\"salad\"\n        handleChange={handleChange}\n      />\n      <Radio\n        form={formValues}\n        name=\"food\"\n        label=\"Steak\"\n        id=\"steak\"\n        handleChange={handleChange}\n      />\n      <Radio\n        form={formValues}\n        name=\"food\"\n        label=\"Salad with Steak\"\n        id=\"saladWithSteak\"\n        handleChange={handleChange}\n      />\n      <p>I like the following: </p>\n      <Checkbox\n        form={formValues}\n        label=\"Football\"\n        id=\"football\"\n        handleChange={handleChange}\n      />\n      <Checkbox\n        form={formValues}\n        label=\"Hockey\"\n        id=\"hockey\"\n        handleChange={handleChange}\n      />\n      <Textarea id=\"bio\" label=\"Bio\" handleChange={handleChange} value={formValues.bio} />\n      <Select\n        value={formValues.car}\n        id=\"car\"\n        label=\"I drive a: \"\n        handleChange={handleChange}\n        options={[\n          {label: 'Please select', value: ''},\n          {label: 'Audi RS6', value: 'Audi RS6'},\n          {label: 'Audi RS4', value: 'Audi RS4'},\n        ]}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nexport default UseStateForm;\n","import React from 'react';\nimport './App.css';\nimport UseStateForm from './components/UseStateForm';\n\nfunction App() {\n  return (\n    <>\n      <UseStateForm\n        handleSubmit={(formValues) => {\n          console.log(formValues);\n        }}\n      />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}